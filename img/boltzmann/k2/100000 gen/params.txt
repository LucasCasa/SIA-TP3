#Selectors: boltzmann, deterministicTourney, elite, ranking, roulette, stochasticTourney, universal
#Selectors 1 and 2 ---> select for crossover
selector1=Boltzmann
selector2=Boltzmann
#Selectors 3 and 4 ---> select for replacement
selector3=Boltzmann
selector4=Boltzmann

#a ---> ratio selector1/selector2
a=1
#b ---> ratio selector3/selector4
b=1

#number of contestants for tournaments
tournament_m=2
#probability of superior fitness winning in stochasticTourney
tournament_r=0.75

#Crossers: anular, onePoint, twoPoints, uniform
crosser=TwoPoints

#n ---> population size
n=150
#k ---> new pop per generation
k=120

#pc ---> crossover probability
pc=0.9
#pm ---> mutation probability per chromosome
pm=0.01

#Initial temperature for Boltzmann
initial_temperature=100
#decrease temperature by
temperature_k=2

#Particular problem modifiers
strength_m=0.9
agility_m=1.1
wisdom_m=1
resistance_m=0.9
life_m=0.8

min_height=1.3
max_height=2.0

#Types: archer, assassin, defender, warrior
character_type=archer

# generations, best,
endcondition=generations
#max number of generations
generations=1000000
#max number of generations with the same best
best_amount=1000000

# I/O
visual=true
write_to_file=false
jump=1000
app_title=Genetic algorithm
chart_title=Best fitness overall and Average and Minimum Fitness per Generation